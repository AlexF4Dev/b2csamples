@using System.Security.Principal
@model IEnumerable<System.Security.Claims.Claim>
@{
    ViewData["Title"] = "Home Page";
}


@**<div>
        @if (User.Identity.IsAuthenticated)
        {
            <table>
                <thead>
                    <tr>
                        <th>Type</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.Type)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Value)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <br/><br/>
            @if (User.IsInRole("admin"))
            {
                <p>You can <a asp-controller="Members" asp-action="Invite">create invitation urls for other users</a> to join your tenant: @User.FindFirst("appTenantName").Value </p>
            }
            <p>Use this url to return back to same tenant later: <a href=@ViewBag.ReturnUrl>@ViewBag.ReturnUrl</a></p>
        }
        else
        {
        <p>Demonstrates the use of a single Azure AD B2C tenant as authentication service for a SaaS application.</p>
        <p>
            A SaaS application commonly uses the concept of a <b>tenant</b> to group users whose use of the application
            is separated from use by any other groups. For example, a SaaS application may provide accounting
            services. Each business using the application is considered a tenant in the application. To distinguish such a tenant
            from Azure AD tenants, this application uses the term <b>application tenant</b>. (Azure AD is also a SaaS application, hence it
            also has the concept of a tenant).
        </p>
        <p>
            In this sample an individual can either <a href="~/home/newtenant">create</a> a new application tenant or <a href="/home/membersignin">
            sign in/sign up</a> to existing tenants. <b>Note:</b> to demonstrate the tenancy feature you should create a tenant using one email address and join
            the same tenant using other email addresses.
                Each application tenant has a short name and (optional) description. In order to sign in or sign up to existing tenants
                users will need to provide the short name of the application tenant. After signin, the application receives an
            OpenIDConnect id token with, among others, the application tenant's unique internal id (guid), name and user's role (admin or member;
            tenant creators are automatically assigned admin role, everybody else is a member). This data allows the application
            to make the appropriate authorization and data separation decisions. In this app, all the claims recived in the token
                are displayed on this page.
        </p>
        <p>
            Users can join existing tenants either by <a href="/home/membersignin">
        signing up (requires user knows the name of the tenant)</a> or by being invited by
        the tenant creator/admin. Once signed up, a user may sign-in again by appending <i>?p=tenantName</i> parameter to the app url.
        </p>
         <p>Source code for this app may be <a href="https://github.com/mrochon/b2csamples">found on github.</a></p>
        <p>For more info <a href="mailto:sailingrock@live.com">email me</a> or use the github source repo comments area.</p>
        }
    </div>*@
