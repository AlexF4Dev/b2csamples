@using System.Security.Principal
@model IEnumerable<System.Security.Claims.Claim>
@{
    ViewData["Title"] = "Home Page";
}

@*<div class="text-center">*@
<div>
    @if (User.Identity.IsAuthenticated)
    {
        <table>
            <thead>
                <tr>
                    <th>Type</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Type)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Value)
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Demonstrates use of single Azure AD B2C tenant authentication service for SaaS applications.</p>
        <p>
            A SaaS application commonly uses the concept of a <b>tenant</b> to group users whose use of the application
            are totally separated from use by any other groups. For example, an application may provide administrative
            services for small businesses. Each business is considered a tenant in the application. To distinguish such a tenant
            from Azure AD tenants, this application uses the term application tenant. (Azure AD is also a SaaS application, hence it
            also has the concept of tenant.
        </p>
        <p>
            In this sample users can either create new application tenants or sign up to existing tenants.
            Each application tenant has a short name and (optional) description. Users sign in or up to existing tenants by
            entering the tenant's name after authenticating to the system. After signin the application received an
            id token with, among others, the application tenant's unique internal id (guid), name and user's role (admin or member;
            tenant creators are automatically assigned admin role, everybody else is a member).
        </p>
    }
</div>
